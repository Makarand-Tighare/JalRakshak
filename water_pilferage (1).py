# -*- coding: utf-8 -*-
"""Water pilferage

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Cs0UVGB8noFid1AhuKdXUGKulX2nOK7
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.ensemble import  AdaBoostClassifier
from sklearn.metrics import accuracy_score, classification_report, f1_score

# Generate synthetic data
np.random.seed(42)

# Number of samples
num_samples = 3000

# Timestamps
start_date = datetime(2022, 1, 1)
timestamps = [start_date + timedelta(minutes=i * 15) for i in range(num_samples)]

# Location (latitude and longitude)
locations = np.random.uniform(low=(30, -90), high=(40, -80), size=(num_samples, 2))

# Water Flow Rate (liters per minute)
flow_rates = np.random.normal(loc=100, scale=20, size=num_samples)

# Pressure Levels (psi)
pressure_levels = np.random.normal(loc=50, scale=10, size=num_samples)

# Usage Patterns (percentage change from normal usage)
usage_patterns = np.random.normal(loc=0, scale=5, size=num_samples)

# Infrastructure Data (pipe diameters in inches)
pipe_diameters = np.random.choice([4, 6, 8], size=num_samples)

# Sensor Data (binary: 0 - normal, 1 - anomaly)
sensor_data = np.random.choice([0, 1], size=num_samples, p=[0.95, 0.05])

# Weather Data (temperature in Celsius)
temperature = np.random.normal(loc=25, scale=5, size=num_samples)

# Day of the Week and Time of Day
day_of_week = [timestamp.weekday() for timestamp in timestamps]
time_of_day = [timestamp.hour for timestamp in timestamps]

# Peak Hour Feature (binary: 1 - peak hour, 0 - non-peak)
peak_hours = np.array([1 if (8 <= hour <= 18) and (day_of_week not in [5, 6]) else 0 for hour in time_of_day])

# Historical Anomalies (binary: 0 - no anomaly, 1 - anomaly)
historical_anomalies = np.random.choice([0, 1], size=num_samples, p=[0.9, 0.1])

# Create DataFrame
columns = ['Timestamp', 'Latitude', 'Longitude', 'FlowRate', 'Pressure', 'UsagePattern',
           'PipeDiameter', 'SensorData', 'Temperature', 'PeakHour', 'HistoricalAnomaly']

data = np.column_stack([timestamps, locations, flow_rates, pressure_levels, usage_patterns,
                       pipe_diameters, sensor_data, temperature, peak_hours, historical_anomalies])

df = pd.DataFrame(data, columns=columns)

# Convert Timestamp column to datetime format
df['Timestamp'] = pd.to_datetime(df['Timestamp'])

# Create 'Pilferage' column (binary: 0 - no pilferage, 1 - pilferage)
df['Pilferage'] = np.random.choice([0, 1], size=num_samples, p=[0.9, 0.1])

# Impute missing values in SensorData and HistoricalAnomaly
df['SensorData'].fillna(df['SensorData'].mean(), inplace=True)
df['HistoricalAnomaly'].fillna(df['HistoricalAnomaly'].mean(), inplace=True)

#df.describe()

# Feature scaling
scaler = MinMaxScaler()
df_scaled = scaler.fit_transform(df.drop(columns=['Timestamp', 'Pilferage']))

# Extract features and target variable
X = df_scaled
y = df['Pilferage']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model selection and training
model = AdaBoostClassifier(random_state=42)

model.fit(X_train, y_train)
# Model evaluation
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
f1_score_weighted = f1_score(y_test, y_pred, average='weighted')

print(f"\nModel: {model.__class__.__name__}")
print(f"Accuracy: {accuracy}")
print(f"F1 Score (Weighted): {f1_score_weighted}")
print(classification_report(y_test, y_pred))