# -*- coding: utf-8 -*-
"""LeakModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12VpnJr0hSOumRm941KXGOidZ0lrz2Dyn
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

df_pressure = pd.read_csv('/content/pressure_response_random.csv', header=None)
df_leak = pd.read_csv('/content/leak_values_random.csv', header=None)

# Split the data into input (X) and output (y)
X = df_pressure.values
y = df_leak.values.argmax(axis=1)  # Convert to class labels

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Visualize the first few pressure values
plt.figure(figsize=(10, 6))
for i in range(5):
    plt.plot(X_train[i], label=f'Leak {y_train[i]}')
plt.xlabel('Time')
plt.ylabel('Pressure')
plt.title('Pressure Response for Different Leaks')
plt.legend()
plt.show()

# Visualize the distribution of pressure values
plt.figure(figsize=(10, 6))
sns.boxplot(data=df_pressure)
plt.title('Distribution of Pressure Values')
plt.xlabel('Sensor')
plt.ylabel('Pressure')
plt.show()

# Visualize the distribution of leak locations
plt.figure(figsize=(10, 6))
sns.countplot(x=y)
plt.title('Distribution of Leak Locations')
plt.xlabel('Leak Location')
plt.ylabel('Count')
plt.show()

# Define the model
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    Dense(64, activation='relu'),
    Dense(df_leak.shape[1], activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.2)

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(X_test_scaled, y_test)
print(f'Test accuracy: {test_acc:.3f}')

# Plot the training history
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training accuracy')
plt.plot(history.history['val_accuracy'], label='Validation accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training loss')
plt.plot(history.history['val_loss'], label='Validation loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()